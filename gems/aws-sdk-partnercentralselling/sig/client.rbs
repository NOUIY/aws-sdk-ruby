# WARNING ABOUT GENERATED CODE
#
# This file is generated. See the contributing guide for more information:
# https://github.com/aws/aws-sdk-ruby/blob/version-3/CONTRIBUTING.md
#
# WARNING ABOUT GENERATED CODE

module Aws
  module PartnerCentralSelling
    class Client < ::Seahorse::Client::Base
      include ::Aws::ClientStubs

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#initialize-instance_method
      def self.new: (
                      ?credentials: untyped,
                      ?region: String,
                      ?access_key_id: String,
                      ?account_id: String,
                      ?active_endpoint_cache: bool,
                      ?adaptive_retry_wait_to_fill: bool,
                      ?client_side_monitoring: bool,
                      ?client_side_monitoring_client_id: String,
                      ?client_side_monitoring_host: String,
                      ?client_side_monitoring_port: Integer,
                      ?client_side_monitoring_publisher: untyped,
                      ?convert_params: bool,
                      ?correct_clock_skew: bool,
                      ?defaults_mode: String,
                      ?disable_host_prefix_injection: bool,
                      ?disable_request_compression: bool,
                      ?endpoint: String,
                      ?endpoint_cache_max_entries: Integer,
                      ?endpoint_cache_max_threads: Integer,
                      ?endpoint_cache_poll_interval: Integer,
                      ?endpoint_discovery: bool,
                      ?ignore_configured_endpoint_urls: bool,
                      ?log_formatter: untyped,
                      ?log_level: Symbol,
                      ?logger: untyped,
                      ?max_attempts: Integer,
                      ?profile: String,
                      ?request_min_compression_size_bytes: Integer,
                      ?retry_backoff: Proc,
                      ?retry_base_delay: Float,
                      ?retry_jitter: (:none | :equal | :full | ^(Integer) -> Integer),
                      ?retry_limit: Integer,
                      ?retry_max_delay: Integer,
                      ?retry_mode: ("legacy" | "standard" | "adaptive"),
                      ?sdk_ua_app_id: String,
                      ?secret_access_key: String,
                      ?session_token: String,
                      ?sigv4a_signing_region_set: Array[String],
                      ?simple_json: bool,
                      ?stub_responses: untyped,
                      ?telemetry_provider: Aws::Telemetry::TelemetryProviderBase,
                      ?token_provider: untyped,
                      ?use_dualstack_endpoint: bool,
                      ?use_fips_endpoint: bool,
                      ?validate_params: bool,
                      ?endpoint_provider: untyped,
                      ?http_proxy: String,
                      ?http_open_timeout: (Float | Integer),
                      ?http_read_timeout: (Float | Integer),
                      ?http_idle_timeout: (Float | Integer),
                      ?http_continue_timeout: (Float | Integer),
                      ?ssl_timeout: (Float | Integer | nil),
                      ?http_wire_trace: bool,
                      ?ssl_verify_peer: bool,
                      ?ssl_ca_bundle: String,
                      ?ssl_ca_directory: String,
                      ?ssl_ca_store: String,
                      ?on_chunk_received: Proc,
                      ?on_chunk_sent: Proc,
                      ?raise_response_errors: bool
                    ) -> instance
                  | (?Hash[Symbol, untyped]) -> instance


      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#assign_opportunity-instance_method
      def assign_opportunity: (
                                assignee: {
                                  business_title: ::String,
                                  email: ::String,
                                  first_name: ::String,
                                  last_name: ::String
                                },
                                catalog: ::String,
                                identifier: ::String
                              ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#associate_opportunity-instance_method
      def associate_opportunity: (
                                   catalog: ::String,
                                   opportunity_identifier: ::String,
                                   related_entity_identifier: ::String,
                                   related_entity_type: ("Solutions" | "AwsProducts" | "AwsMarketplaceOffers")
                                 ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                               | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _CreateOpportunityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::CreateOpportunityResponse]
        def id: () -> ::String
        def last_modified_date: () -> ::Time
        def partner_opportunity_identifier: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#create_opportunity-instance_method
      def create_opportunity: (
                                catalog: ::String,
                                client_token: ::String,
                                ?customer: {
                                  account: {
                                    address: {
                                      city: ::String?,
                                      country_code: ("US" | "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "CV" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "CD" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MK" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "AN" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SZ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")?,
                                      postal_code: ::String?,
                                      state_or_region: ::String?,
                                      street_address: ::String?
                                    }?,
                                    aws_account_id: ::String?,
                                    company_name: ::String,
                                    duns: ::String?,
                                    industry: ("Aerospace" | "Agriculture" | "Automotive" | "Computers and Electronics" | "Consumer Goods" | "Education" | "Energy - Oil and Gas" | "Energy - Power and Utilities" | "Financial Services" | "Gaming" | "Government" | "Healthcare" | "Hospitality" | "Life Sciences" | "Manufacturing" | "Marketing and Advertising" | "Media and Entertainment" | "Mining" | "Non-Profit Organization" | "Professional Services" | "Real Estate and Construction" | "Retail" | "Software and Internet" | "Telecommunications" | "Transportation and Logistics" | "Travel" | "Wholesale and Distribution" | "Other")?,
                                    other_industry: ::String?,
                                    website_url: ::String?
                                  }?,
                                  contacts: Array[
                                    {
                                      business_title: ::String?,
                                      email: ::String?,
                                      first_name: ::String?,
                                      last_name: ::String?,
                                      phone: ::String?
                                    },
                                  ]?
                                },
                                ?life_cycle: {
                                  closed_lost_reason: ("Customer Deficiency" | "Delay / Cancellation of Project" | "Legal / Tax / Regulatory" | "Lost to Competitor - Google" | "Lost to Competitor - Microsoft" | "Lost to Competitor - SoftLayer" | "Lost to Competitor - VMWare" | "Lost to Competitor - Other" | "No Opportunity" | "On Premises Deployment" | "Partner Gap" | "Price" | "Security / Compliance" | "Technical Limitations" | "Customer Experience" | "Other" | "People/Relationship/Governance" | "Product/Technology" | "Financial/Commercial")?,
                                  next_steps: ::String?,
                                  next_steps_history: Array[
                                    {
                                      time: ::Time,
                                      value: ::String
                                    },
                                  ]?,
                                  review_comments: ::String?,
                                  review_status: ("Pending Submission" | "Submitted" | "In review" | "Approved" | "Rejected" | "Action Required")?,
                                  review_status_reason: ::String?,
                                  stage: ("Prospect" | "Qualified" | "Technical Validation" | "Business Validation" | "Committed" | "Launched" | "Closed Lost")?,
                                  target_close_date: ::String?
                                },
                                ?marketing: {
                                  aws_funding_used: ("Yes" | "No")?,
                                  campaign_name: ::String?,
                                  channels: Array[("AWS Marketing Central" | "Content Syndication" | "Display" | "Email" | "Live Event" | "Out Of Home (OOH)" | "Print" | "Search" | "Social" | "Telemarketing" | "TV" | "Video" | "Virtual Event")]?,
                                  source: ("Marketing Activity" | "None")?,
                                  use_cases: Array[::String]?
                                },
                                ?national_security: ("Yes" | "No"),
                                ?opportunity_team: Array[
                                  {
                                    business_title: ::String?,
                                    email: ::String?,
                                    first_name: ::String?,
                                    last_name: ::String?,
                                    phone: ::String?
                                  },
                                ],
                                ?opportunity_type: ("Net New Business" | "Flat Renewal" | "Expansion"),
                                ?origin: ("AWS Referral" | "Partner Referral"),
                                ?partner_opportunity_identifier: ::String,
                                ?primary_needs_from_aws: Array[("Co-Sell - Architectural Validation" | "Co-Sell - Business Presentation" | "Co-Sell - Competitive Information" | "Co-Sell - Pricing Assistance" | "Co-Sell - Technical Consultation" | "Co-Sell - Total Cost of Ownership Evaluation" | "Co-Sell - Deal Support" | "Co-Sell - Support for Public Tender / RFx")],
                                ?project: {
                                  additional_comments: ::String?,
                                  apn_programs: Array[::String]?,
                                  competitor_name: ("Oracle Cloud" | "On-Prem" | "Co-location" | "Akamai" | "AliCloud" | "Google Cloud Platform" | "IBM Softlayer" | "Microsoft Azure" | "Other- Cost Optimization" | "No Competition" | "*Other")?,
                                  customer_business_problem: ::String?,
                                  customer_use_case: ::String?,
                                  delivery_models: Array[("SaaS or PaaS" | "BYOL or AMI" | "Managed Services" | "Professional Services" | "Resell" | "Other")]?,
                                  expected_customer_spend: Array[
                                    {
                                      amount: ::String,
                                      currency_code: ("USD" | "EUR" | "GBP" | "AUD" | "CAD" | "CNY" | "NZD" | "INR" | "JPY" | "CHF" | "SEK" | "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BOV" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CDF" | "CHE" | "CHW" | "CLF" | "CLP" | "COP" | "COU" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "FJD" | "FKP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "SSP" | "STN" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USN" | "UYI" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XSU" | "XUA" | "YER" | "ZAR" | "ZMW" | "ZWL"),
                                      frequency: ("Monthly"),
                                      target_company: ::String
                                    },
                                  ]?,
                                  other_competitor_names: ::String?,
                                  other_solution_description: ::String?,
                                  related_opportunity_identifier: ::String?,
                                  sales_activities: Array[("Initialized discussions with customer" | "Customer has shown interest in solution" | "Conducted POC / Demo" | "In evaluation / planning stage" | "Agreed on solution to Business Problem" | "Completed Action Plan" | "Finalized Deployment Need" | "SOW Signed")]?,
                                  title: ::String?
                                },
                                ?software_revenue: {
                                  delivery_model: ("Contract" | "Pay-as-you-go" | "Subscription")?,
                                  effective_date: ::String?,
                                  expiration_date: ::String?,
                                  value: {
                                    amount: ::String,
                                    currency_code: ("USD" | "EUR" | "GBP" | "AUD" | "CAD" | "CNY" | "NZD" | "INR" | "JPY" | "CHF" | "SEK" | "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BOV" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CDF" | "CHE" | "CHW" | "CLF" | "CLP" | "COP" | "COU" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "FJD" | "FKP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "SSP" | "STN" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USN" | "UYI" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XSU" | "XUA" | "YER" | "ZAR" | "ZMW" | "ZWL")
                                  }?
                                }
                              ) -> _CreateOpportunityResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _CreateOpportunityResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#disassociate_opportunity-instance_method
      def disassociate_opportunity: (
                                      catalog: ::String,
                                      opportunity_identifier: ::String,
                                      related_entity_identifier: ::String,
                                      related_entity_type: ("Solutions" | "AwsProducts" | "AwsMarketplaceOffers")
                                    ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                  | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _GetAwsOpportunitySummaryResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetAwsOpportunitySummaryResponse]
        def catalog: () -> ::String
        def customer: () -> Types::AwsOpportunityCustomer
        def insights: () -> Types::AwsOpportunityInsights
        def involvement_type: () -> ("For Visibility Only" | "Co-Sell")
        def involvement_type_change_reason: () -> ("Expansion Opportunity" | "Change in Deal Information" | "Customer Requested" | "Technical Complexity" | "Risk Mitigation")
        def life_cycle: () -> Types::AwsOpportunityLifeCycle
        def opportunity_team: () -> ::Array[Types::AwsTeamMember]
        def origin: () -> ("AWS Referral" | "Partner Referral")
        def project: () -> Types::AwsOpportunityProject
        def related_entity_ids: () -> Types::AwsOpportunityRelatedEntities
        def related_opportunity_id: () -> ::String
        def visibility: () -> ("Full" | "Limited")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#get_aws_opportunity_summary-instance_method
      def get_aws_opportunity_summary: (
                                         catalog: ::String,
                                         related_opportunity_identifier: ::String
                                       ) -> _GetAwsOpportunitySummaryResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetAwsOpportunitySummaryResponseSuccess

      interface _GetEngagementInvitationResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetEngagementInvitationResponse]
        def arn: () -> ::String
        def catalog: () -> ::String
        def engagement_title: () -> ::String
        def expiration_date: () -> ::Time
        def id: () -> ::String
        def invitation_date: () -> ::Time
        def payload: () -> Types::Payload
        def payload_type: () -> ("OpportunityInvitation")
        def receiver: () -> Types::Receiver
        def rejection_reason: () -> ::String
        def sender_aws_account_id: () -> ::String
        def sender_company_name: () -> ::String
        def status: () -> ("ACCEPTED" | "PENDING" | "REJECTED" | "EXPIRED")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#get_engagement_invitation-instance_method
      def get_engagement_invitation: (
                                       catalog: ::String,
                                       identifier: ::String
                                     ) -> _GetEngagementInvitationResponseSuccess
                                   | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetEngagementInvitationResponseSuccess

      interface _GetOpportunityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::GetOpportunityResponse]
        def catalog: () -> ::String
        def created_date: () -> ::Time
        def customer: () -> Types::Customer
        def id: () -> ::String
        def last_modified_date: () -> ::Time
        def life_cycle: () -> Types::LifeCycle
        def marketing: () -> Types::Marketing
        def national_security: () -> ("Yes" | "No")
        def opportunity_team: () -> ::Array[Types::Contact]
        def opportunity_type: () -> ("Net New Business" | "Flat Renewal" | "Expansion")
        def partner_opportunity_identifier: () -> ::String
        def primary_needs_from_aws: () -> ::Array[("Co-Sell - Architectural Validation" | "Co-Sell - Business Presentation" | "Co-Sell - Competitive Information" | "Co-Sell - Pricing Assistance" | "Co-Sell - Technical Consultation" | "Co-Sell - Total Cost of Ownership Evaluation" | "Co-Sell - Deal Support" | "Co-Sell - Support for Public Tender / RFx")]
        def project: () -> Types::Project
        def related_entity_identifiers: () -> Types::RelatedEntityIdentifiers
        def software_revenue: () -> Types::SoftwareRevenue
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#get_opportunity-instance_method
      def get_opportunity: (
                             catalog: ::String,
                             identifier: ::String
                           ) -> _GetOpportunityResponseSuccess
                         | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _GetOpportunityResponseSuccess

      interface _ListEngagementInvitationsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListEngagementInvitationsResponse]
        def engagement_invitation_summaries: () -> ::Array[Types::EngagementInvitationSummary]
        def next_token: () -> ::String
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#list_engagement_invitations-instance_method
      def list_engagement_invitations: (
                                         catalog: ::String,
                                         ?max_results: ::Integer,
                                         ?next_token: ::String,
                                         participant_type: ("RECEIVER"),
                                         ?payload_type: Array[("OpportunityInvitation")],
                                         ?sort: {
                                           sort_by: ("InvitationDate"),
                                           sort_order: ("ASCENDING" | "DESCENDING")
                                         }
                                       ) -> _ListEngagementInvitationsResponseSuccess
                                     | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListEngagementInvitationsResponseSuccess

      interface _ListOpportunitiesResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListOpportunitiesResponse]
        def next_token: () -> ::String
        def opportunity_summaries: () -> ::Array[Types::OpportunitySummary]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#list_opportunities-instance_method
      def list_opportunities: (
                                catalog: ::String,
                                ?customer_company_name: Array[::String],
                                ?identifier: Array[::String],
                                ?last_modified_date: {
                                  after_last_modified_date: ::Time?,
                                  before_last_modified_date: ::Time?
                                },
                                ?life_cycle_review_status: Array[("Pending Submission" | "Submitted" | "In review" | "Approved" | "Rejected" | "Action Required")],
                                ?life_cycle_stage: Array[("Prospect" | "Qualified" | "Technical Validation" | "Business Validation" | "Committed" | "Launched" | "Closed Lost")],
                                ?max_results: ::Integer,
                                ?next_token: ::String,
                                ?sort: {
                                  sort_by: ("LastModifiedDate" | "Identifier" | "CustomerCompanyName"),
                                  sort_order: ("ASCENDING" | "DESCENDING")
                                }
                              ) -> _ListOpportunitiesResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListOpportunitiesResponseSuccess

      interface _ListSolutionsResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::ListSolutionsResponse]
        def next_token: () -> ::String
        def solution_summaries: () -> ::Array[Types::SolutionBase]
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#list_solutions-instance_method
      def list_solutions: (
                            catalog: ::String,
                            ?category: Array[::String],
                            ?identifier: Array[::String],
                            ?max_results: ::Integer,
                            ?next_token: ::String,
                            ?sort: {
                              sort_by: ("Identifier" | "Name" | "Status" | "Category" | "CreatedDate"),
                              sort_order: ("ASCENDING" | "DESCENDING")
                            },
                            ?status: Array[("Active" | "Inactive" | "Draft")]
                          ) -> _ListSolutionsResponseSuccess
                        | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _ListSolutionsResponseSuccess

      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#reject_engagement_invitation-instance_method
      def reject_engagement_invitation: (
                                          catalog: ::String,
                                          identifier: ::String,
                                          ?rejection_reason: ::String
                                        ) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]
                                      | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> ::Seahorse::Client::_ResponseSuccess[::Aws::EmptyStructure]

      interface _StartEngagementByAcceptingInvitationTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartEngagementByAcceptingInvitationTaskResponse]
        def engagement_invitation_id: () -> ::String
        def message: () -> ::String
        def opportunity_id: () -> ::String
        def reason_code: () -> ("InvitationAccessDenied" | "EngagementAccessDenied" | "OpportunityAccessDenied" | "ResourceSnapshotJobAccessDenied" | "EngagementValidationFailed" | "OpportunitySubmissionFailed" | "EngagementInvitationConflict" | "InternalError" | "OpportunityValidationFailed" | "OpportunityConflict")
        def start_time: () -> ::Time
        def task_arn: () -> ::String
        def task_id: () -> ::String
        def task_status: () -> ("IN_PROGRESS" | "COMPLETE" | "FAILED")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#start_engagement_by_accepting_invitation_task-instance_method
      def start_engagement_by_accepting_invitation_task: (
                                                           catalog: ::String,
                                                           client_token: ::String,
                                                           identifier: ::String
                                                         ) -> _StartEngagementByAcceptingInvitationTaskResponseSuccess
                                                       | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartEngagementByAcceptingInvitationTaskResponseSuccess

      interface _StartEngagementFromOpportunityTaskResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::StartEngagementFromOpportunityTaskResponse]
        def message: () -> ::String
        def opportunity_id: () -> ::String
        def reason_code: () -> ("InvitationAccessDenied" | "EngagementAccessDenied" | "OpportunityAccessDenied" | "ResourceSnapshotJobAccessDenied" | "EngagementValidationFailed" | "OpportunitySubmissionFailed" | "EngagementInvitationConflict" | "InternalError" | "OpportunityValidationFailed" | "OpportunityConflict")
        def start_time: () -> ::Time
        def task_arn: () -> ::String
        def task_id: () -> ::String
        def task_status: () -> ("IN_PROGRESS" | "COMPLETE" | "FAILED")
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#start_engagement_from_opportunity_task-instance_method
      def start_engagement_from_opportunity_task: (
                                                    aws_submission: {
                                                      involvement_type: ("For Visibility Only" | "Co-Sell"),
                                                      visibility: ("Full" | "Limited")?
                                                    },
                                                    catalog: ::String,
                                                    client_token: ::String,
                                                    identifier: ::String
                                                  ) -> _StartEngagementFromOpportunityTaskResponseSuccess
                                                | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _StartEngagementFromOpportunityTaskResponseSuccess

      interface _UpdateOpportunityResponseSuccess
        include ::Seahorse::Client::_ResponseSuccess[Types::UpdateOpportunityResponse]
        def id: () -> ::String
        def last_modified_date: () -> ::Time
      end
      # https://docs.aws.amazon.com/sdk-for-ruby/v3/api/Aws/PartnerCentralSelling/Client.html#update_opportunity-instance_method
      def update_opportunity: (
                                catalog: ::String,
                                ?customer: {
                                  account: {
                                    address: {
                                      city: ::String?,
                                      country_code: ("US" | "AF" | "AX" | "AL" | "DZ" | "AS" | "AD" | "AO" | "AI" | "AQ" | "AG" | "AR" | "AM" | "AW" | "AU" | "AT" | "AZ" | "BS" | "BH" | "BD" | "BB" | "BY" | "BE" | "BZ" | "BJ" | "BM" | "BT" | "BO" | "BQ" | "BA" | "BW" | "BV" | "BR" | "IO" | "BN" | "BG" | "BF" | "BI" | "KH" | "CM" | "CA" | "CV" | "KY" | "CF" | "TD" | "CL" | "CN" | "CX" | "CC" | "CO" | "KM" | "CG" | "CK" | "CR" | "CI" | "HR" | "CU" | "CW" | "CY" | "CZ" | "CD" | "DK" | "DJ" | "DM" | "DO" | "EC" | "EG" | "SV" | "GQ" | "ER" | "EE" | "ET" | "FK" | "FO" | "FJ" | "FI" | "FR" | "GF" | "PF" | "TF" | "GA" | "GM" | "GE" | "DE" | "GH" | "GI" | "GR" | "GL" | "GD" | "GP" | "GU" | "GT" | "GG" | "GN" | "GW" | "GY" | "HT" | "HM" | "VA" | "HN" | "HK" | "HU" | "IS" | "IN" | "ID" | "IR" | "IQ" | "IE" | "IM" | "IL" | "IT" | "JM" | "JP" | "JE" | "JO" | "KZ" | "KE" | "KI" | "KR" | "KW" | "KG" | "LA" | "LV" | "LB" | "LS" | "LR" | "LY" | "LI" | "LT" | "LU" | "MO" | "MK" | "MG" | "MW" | "MY" | "MV" | "ML" | "MT" | "MH" | "MQ" | "MR" | "MU" | "YT" | "MX" | "FM" | "MD" | "MC" | "MN" | "ME" | "MS" | "MA" | "MZ" | "MM" | "NA" | "NR" | "NP" | "NL" | "AN" | "NC" | "NZ" | "NI" | "NE" | "NG" | "NU" | "NF" | "MP" | "NO" | "OM" | "PK" | "PW" | "PS" | "PA" | "PG" | "PY" | "PE" | "PH" | "PN" | "PL" | "PT" | "PR" | "QA" | "RE" | "RO" | "RU" | "RW" | "BL" | "SH" | "KN" | "LC" | "MF" | "PM" | "VC" | "WS" | "SM" | "ST" | "SA" | "SN" | "RS" | "SC" | "SL" | "SG" | "SX" | "SK" | "SI" | "SB" | "SO" | "ZA" | "GS" | "SS" | "ES" | "LK" | "SD" | "SR" | "SJ" | "SZ" | "SE" | "CH" | "SY" | "TW" | "TJ" | "TZ" | "TH" | "TL" | "TG" | "TK" | "TO" | "TT" | "TN" | "TR" | "TM" | "TC" | "TV" | "UG" | "UA" | "AE" | "GB" | "UM" | "UY" | "UZ" | "VU" | "VE" | "VN" | "VG" | "VI" | "WF" | "EH" | "YE" | "ZM" | "ZW")?,
                                      postal_code: ::String?,
                                      state_or_region: ::String?,
                                      street_address: ::String?
                                    }?,
                                    aws_account_id: ::String?,
                                    company_name: ::String,
                                    duns: ::String?,
                                    industry: ("Aerospace" | "Agriculture" | "Automotive" | "Computers and Electronics" | "Consumer Goods" | "Education" | "Energy - Oil and Gas" | "Energy - Power and Utilities" | "Financial Services" | "Gaming" | "Government" | "Healthcare" | "Hospitality" | "Life Sciences" | "Manufacturing" | "Marketing and Advertising" | "Media and Entertainment" | "Mining" | "Non-Profit Organization" | "Professional Services" | "Real Estate and Construction" | "Retail" | "Software and Internet" | "Telecommunications" | "Transportation and Logistics" | "Travel" | "Wholesale and Distribution" | "Other")?,
                                    other_industry: ::String?,
                                    website_url: ::String?
                                  }?,
                                  contacts: Array[
                                    {
                                      business_title: ::String?,
                                      email: ::String?,
                                      first_name: ::String?,
                                      last_name: ::String?,
                                      phone: ::String?
                                    },
                                  ]?
                                },
                                identifier: ::String,
                                last_modified_date: ::Time,
                                ?life_cycle: {
                                  closed_lost_reason: ("Customer Deficiency" | "Delay / Cancellation of Project" | "Legal / Tax / Regulatory" | "Lost to Competitor - Google" | "Lost to Competitor - Microsoft" | "Lost to Competitor - SoftLayer" | "Lost to Competitor - VMWare" | "Lost to Competitor - Other" | "No Opportunity" | "On Premises Deployment" | "Partner Gap" | "Price" | "Security / Compliance" | "Technical Limitations" | "Customer Experience" | "Other" | "People/Relationship/Governance" | "Product/Technology" | "Financial/Commercial")?,
                                  next_steps: ::String?,
                                  next_steps_history: Array[
                                    {
                                      time: ::Time,
                                      value: ::String
                                    },
                                  ]?,
                                  review_comments: ::String?,
                                  review_status: ("Pending Submission" | "Submitted" | "In review" | "Approved" | "Rejected" | "Action Required")?,
                                  review_status_reason: ::String?,
                                  stage: ("Prospect" | "Qualified" | "Technical Validation" | "Business Validation" | "Committed" | "Launched" | "Closed Lost")?,
                                  target_close_date: ::String?
                                },
                                ?marketing: {
                                  aws_funding_used: ("Yes" | "No")?,
                                  campaign_name: ::String?,
                                  channels: Array[("AWS Marketing Central" | "Content Syndication" | "Display" | "Email" | "Live Event" | "Out Of Home (OOH)" | "Print" | "Search" | "Social" | "Telemarketing" | "TV" | "Video" | "Virtual Event")]?,
                                  source: ("Marketing Activity" | "None")?,
                                  use_cases: Array[::String]?
                                },
                                ?national_security: ("Yes" | "No"),
                                ?opportunity_type: ("Net New Business" | "Flat Renewal" | "Expansion"),
                                ?partner_opportunity_identifier: ::String,
                                ?primary_needs_from_aws: Array[("Co-Sell - Architectural Validation" | "Co-Sell - Business Presentation" | "Co-Sell - Competitive Information" | "Co-Sell - Pricing Assistance" | "Co-Sell - Technical Consultation" | "Co-Sell - Total Cost of Ownership Evaluation" | "Co-Sell - Deal Support" | "Co-Sell - Support for Public Tender / RFx")],
                                ?project: {
                                  additional_comments: ::String?,
                                  apn_programs: Array[::String]?,
                                  competitor_name: ("Oracle Cloud" | "On-Prem" | "Co-location" | "Akamai" | "AliCloud" | "Google Cloud Platform" | "IBM Softlayer" | "Microsoft Azure" | "Other- Cost Optimization" | "No Competition" | "*Other")?,
                                  customer_business_problem: ::String?,
                                  customer_use_case: ::String?,
                                  delivery_models: Array[("SaaS or PaaS" | "BYOL or AMI" | "Managed Services" | "Professional Services" | "Resell" | "Other")]?,
                                  expected_customer_spend: Array[
                                    {
                                      amount: ::String,
                                      currency_code: ("USD" | "EUR" | "GBP" | "AUD" | "CAD" | "CNY" | "NZD" | "INR" | "JPY" | "CHF" | "SEK" | "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BOV" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CDF" | "CHE" | "CHW" | "CLF" | "CLP" | "COP" | "COU" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "FJD" | "FKP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "SSP" | "STN" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USN" | "UYI" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XSU" | "XUA" | "YER" | "ZAR" | "ZMW" | "ZWL"),
                                      frequency: ("Monthly"),
                                      target_company: ::String
                                    },
                                  ]?,
                                  other_competitor_names: ::String?,
                                  other_solution_description: ::String?,
                                  related_opportunity_identifier: ::String?,
                                  sales_activities: Array[("Initialized discussions with customer" | "Customer has shown interest in solution" | "Conducted POC / Demo" | "In evaluation / planning stage" | "Agreed on solution to Business Problem" | "Completed Action Plan" | "Finalized Deployment Need" | "SOW Signed")]?,
                                  title: ::String?
                                },
                                ?software_revenue: {
                                  delivery_model: ("Contract" | "Pay-as-you-go" | "Subscription")?,
                                  effective_date: ::String?,
                                  expiration_date: ::String?,
                                  value: {
                                    amount: ::String,
                                    currency_code: ("USD" | "EUR" | "GBP" | "AUD" | "CAD" | "CNY" | "NZD" | "INR" | "JPY" | "CHF" | "SEK" | "AED" | "AFN" | "ALL" | "AMD" | "ANG" | "AOA" | "ARS" | "AWG" | "AZN" | "BAM" | "BBD" | "BDT" | "BGN" | "BHD" | "BIF" | "BMD" | "BND" | "BOB" | "BOV" | "BRL" | "BSD" | "BTN" | "BWP" | "BYN" | "BZD" | "CDF" | "CHE" | "CHW" | "CLF" | "CLP" | "COP" | "COU" | "CRC" | "CUC" | "CUP" | "CVE" | "CZK" | "DJF" | "DKK" | "DOP" | "DZD" | "EGP" | "ERN" | "ETB" | "FJD" | "FKP" | "GEL" | "GHS" | "GIP" | "GMD" | "GNF" | "GTQ" | "GYD" | "HKD" | "HNL" | "HRK" | "HTG" | "HUF" | "IDR" | "ILS" | "IQD" | "IRR" | "ISK" | "JMD" | "JOD" | "KES" | "KGS" | "KHR" | "KMF" | "KPW" | "KRW" | "KWD" | "KYD" | "KZT" | "LAK" | "LBP" | "LKR" | "LRD" | "LSL" | "LYD" | "MAD" | "MDL" | "MGA" | "MKD" | "MMK" | "MNT" | "MOP" | "MRU" | "MUR" | "MVR" | "MWK" | "MXN" | "MXV" | "MYR" | "MZN" | "NAD" | "NGN" | "NIO" | "NOK" | "NPR" | "OMR" | "PAB" | "PEN" | "PGK" | "PHP" | "PKR" | "PLN" | "PYG" | "QAR" | "RON" | "RSD" | "RUB" | "RWF" | "SAR" | "SBD" | "SCR" | "SDG" | "SGD" | "SHP" | "SLL" | "SOS" | "SRD" | "SSP" | "STN" | "SVC" | "SYP" | "SZL" | "THB" | "TJS" | "TMT" | "TND" | "TOP" | "TRY" | "TTD" | "TWD" | "TZS" | "UAH" | "UGX" | "USN" | "UYI" | "UYU" | "UZS" | "VEF" | "VND" | "VUV" | "WST" | "XAF" | "XCD" | "XDR" | "XOF" | "XPF" | "XSU" | "XUA" | "YER" | "ZAR" | "ZMW" | "ZWL")
                                  }?
                                }
                              ) -> _UpdateOpportunityResponseSuccess
                            | (Hash[Symbol, untyped] params, ?Hash[Symbol, untyped] options) -> _UpdateOpportunityResponseSuccess
    end
  end
end

